#!/bin/bash

version="0.1.3"

usage="
entail $version
------------
a.k.a. \"nomad tail\"
-------------------
I tail logs from all nomad allocations for a given job

how to play:

$ entail job [opts]

opts are:

  -h, --help           show this usage details
  -v, --verbose        show details of what is run under the hood
  -t, --task           zoom in on logs for a particular nomad job's task
  -a, --tail-all       tail -f all files in the allocation: .stdout, .stderr, .anything
  -l, --log-root       root directory for \"entail\" to tail or grep logs from
  -n, --file-name      specific file name to grep
  -g, --grep           a pattern that will be plugged in to \"grep -E <pattern>\"

example : $0 my-job                           ## tail -f logs from all allocations of my-job
example : $0 my-job -t my-task                ## if a job has one or more tasks
example : $0 my-job -a                        ## tail -f all files from all allocations
example : $0 my-job -l /opt/app/hubble/logs   ## changing a log root directory to tail / grep from
example : $0 my-job -g \"soft[^[:space:]]+\"    ## grep -E \"soft[^[:space:]]+\"

make sure:

* NOMAD_ADDR and NOMAD_TOKEN are exported/set to point to the correct environment
* \"jq\" and \"nomad\" command line programs are installed"

check_if_installed() {
  command -v "$1" >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo "entail needs \"$1\" program to be installed. $2"
    exit 1
  fi
}

job=$1

# log_root="/opt/app/$job/logs"
log_root="/alloc/logs"

## TODO: add more and cleanup command line args
if [ "$#" -ne 0 ]; then
  while [ "$#" -gt 0 ]
  do
    case "$1" in
      -h|--help)
        echo "$usage"
        exit 0
        ;;
      -v|--verbose)
        verbose="true"
        ;;
      -l|--log-root)
        log_root=$2      ## TODO: validate an empty value
        ;;
      -n|--file-name)
        file_name=$2     ## TODO: validate an empty value
        ;;
      -t|--task)
        task=$2          ## TODO: validate an empty value
        with_task="-task $task"
        ;;
      -a|--tail-all)
        tail_all='sh -c "cd /alloc/logs/ && tail -f *"'
        ;;
      -g|--grep)
        grep_pattern=$2
        shift
        ;;
      --)
        break
        ;;
      -*)
        echo -e "unsupported option/flag \"$1\".\ntry \"--help\" for available options" >&2
        exit 1
        ;;
      *) ;;
    esac
    shift
  done
else
  echo "$usage"
  exit 1
fi

check_if_installed "jq" "https://stedolan.github.io/jq/download/"
check_if_installed "nomad" "https://developer.hashicorp.com/nomad/docs/install"

: ${NOMAD_ADDR?"env variable NOMAD_ADDR needs to be set"}
: ${NOMAD_TOKEN?"env variable NOMAD_TOKEN needs to be set"}

if [ -z "$grep_pattern" ]
then
  if [ -z "$tail_all" ]
  then
    nexec="nomad logs -tail -n 99 -f"
  else
    nexec="nomad alloc exec -i"
  fi
else
  nexec="nomad alloc exec -i"

  if [ -z "$file_name" ]
  then
    ## non GNU grep does not have --exclude for hidden files
    ## "/file*" does not expand over ssh
    ## hence cd | ls | xargs grep
    with_grep='sh -c "cd /alloc/logs/ && ls | xargs grep -E \"'$grep_pattern'\""'  ## TODO: validate empty values
  else
    with_grep="grep -E \"$grep_pattern\" $log_root/$file_name"
  fi
fi

echo "hit ctrl-c to stop"

allocs=( `nomad job allocs -json $job | jq -rn 'inputs[] .ID'` )
nomad_clients=( `nomad job allocs -json $job | jq -rn 'inputs[] .NodeName'` )
versions=( `nomad job allocs -json $job | jq -rn 'inputs[] .TaskStates[].Events[] .Details | select(.image) | .image' | cut -d':' -f 2` )

echo -------------------------------------------------------------------------------------
echo -e 'looking at logs for \t ' "\"$job\"" app
echo -e 'logs from \t\t ' $log_root/$file_name
echo
echo "                          allocation | version | node client"
echo -------------------------------------------------------------------------------------

PIDS=""

for i in "${!allocs[@]}"; do

  [ -z "${versions}" ] && version="no tag" || version="${versions[i]}"

  echo "${allocs[i]} |  $version | ${nomad_clients[i]}"


  if [ -z "$with_grep" ]
  then
    [ ! -z "$verbose" ] && echo "running: $nexec $with_task ${allocs[i]} $tail_all &"
    eval "$nexec $with_task ${allocs[i]} $tail_all &"
  else
    [ ! -z "$verbose" ] && echo "running: $nexec $with_task ${allocs[i]} $with_grep"
    eval "$nexec $with_task ${allocs[i]} $with_grep"
  fi

  PIDS="$PIDS $!"
done

echo -------------------------------------------------------------------------------------

trap 'kill $PIDS' SIGINT

wait
