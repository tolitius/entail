#!/bin/bash

version="0.1.4"

check_if_installed() {
  command -v "$1" >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo "entail needs \"$1\" program to be installed. $2"
    exit 1
  fi
}

usage="
entail $version
------------
a.k.a. \"nomad tail\"
-------------------
I tail logs from all nomad allocations for a given job

how to play:

$ entail job [opts]

opts are:

  -h, --help           show this usage details
  -v, --verbose        show details of what is run under the hood
  -t, --task           zoom in on logs for a particular nomad job's task
  -a, --tail-all       tail -f all files in the allocation: .stdout, .stderr, .anything
  -l, --log-root       root directory for \"entail\" to tail or grep logs from
  -n, --file-name      specific file name to grep
  -g, --grep           a pattern that will be plugged in to \"grep -E <pattern>\"
  --no-color           disable colorized output (useful when redirecting to files)

example : $0 my-job                             ## tail -f logs from all allocations of my-job
example : $0 my-job -t my-task                  ## if a job has one or more tasks
example : $0 my-job -a                          ## tail -f all files from all allocations
example : $0 my-job -l /opt/app/hubble/logs     ## changing a log root directory to tail / grep from
example : $0 my-job -g \"soft[^[:space:]]+\"    ## grep -E \"soft[^[:space:]]+\"
example : $0 my-job --no-color                  ## disable colored output (useful for redirecting to files)

make sure:

* NOMAD_ADDR and NOMAD_TOKEN are exported/set to point to the correct environment
* \"jq\" and \"nomad\" command line programs are installed"

job=$1

# log_root="/opt/app/$job/logs"
log_root="/alloc/logs"

## TODO: add more and cleanup command line args
if [ "$#" -ne 0 ]; then
  while [ "$#" -gt 0 ]
  do
    case "$1" in
      -h|--help)
        echo "$usage"
        exit 0
        ;;
      -v|--verbose)
        verbose="true"
        ;;
      -l|--log-root)
        log_root=$2      ## TODO: validate an empty value
        ;;
      -n|--file-name)
        file_name=$2     ## TODO: validate an empty value
        ;;
      -t|--task)
        task=$2          ## TODO: validate an empty value
        with_task="-task $task"
        ;;
      -a|--tail-all)
        tail_all='sh -c "cd /alloc/logs/ && tail -f *"'
        ;;
      -g|--grep)
        grep_pattern=$2
        shift
        ;;
      --no-color)
        no_color="true"
        ;;
      --)
        break
        ;;
      -*)
        echo -e "unsupported option/flag \"$1\".\ntry \"--help\" for available options" >&2
        exit 1
        ;;
      *) ;;
    esac
    shift
  done
else
  echo "$usage"
  exit 1
fi

check_if_installed "jq" "https://stedolan.github.io/jq/download/"
check_if_installed "nomad" "https://developer.hashicorp.com/nomad/docs/install"

: ${NOMAD_ADDR?"env variable NOMAD_ADDR needs to be set"}
: ${NOMAD_TOKEN?"env variable NOMAD_TOKEN needs to be set"}

# define color codes for log highlighting
RED=$(echo -e "\033[1;31m")            # bold red for errors
YELLOW=$(echo -e "\033[1;38;5;208m")   # bold yellow for warnings
BLUE=$(echo -e "\033[1;34m")           # bold blue for info
MAGENTA=$(echo -e "\033[1;35m")        # bold magenta for debug
CYAN=$(echo -e "\033[1;37m")           # bold cyan for timestamps
GREEN=$(echo -e "\033[1;38;5;113m")    # bold green for success
LIGHT_BLUE=$(echo -e "\033[1;38;5;117m") # light blue for function names
GRAY=$(echo -e "\033[1;30m")           # gray for keys
DARK_GRAY=$(echo -e "\\033[1;38;5;247m")      # dark gray for trace ids
NC=$(echo -e "\033[0m")                # no color (reset)

# configurable trace variables - can be overridden via environment variables
# default to mulog format
: ${TRACE_FUNCTION_NAME:="mulog/event-name"}
: ${TRACE_OUTCOME:="mulog/outcome"}
: ${TRACE_OUTCOME_OK:=":ok"}
: ${TRACE_OUTCOME_WARN:=":warn"}
: ${TRACE_OUTCOME_ERROR:=":error"}
: ${TRACE_ID:="traceId"}

# add colors to the logs

colorize_log_levels() {
  sed "
    s/ERROR /${RED}ERROR${NC}/g
    s/FAILED/${RED}FAILED${NC}/g
    s/CRITICAL/${RED}CRITICAL${NC}/g
    s/FATAL/${RED}FATAL${NC}/g
    s/WARN /${YELLOW}WARN${NC}/g
    s/WARNING/${YELLOW}WARNING${NC}/g
    s/INFO /${BLUE}INFO${NC}/g
    s/DEBUG/${MAGENTA}DEBUG${NC}/g
  "
}

# function to colorize just the timestamps
# formats supported:
# - 2025-03-15T23:13:06,725 (comma milliseconds)
# - 2025-03-15T23:15:39.547Z (period milliseconds with Z)
# - 2025-03-15 20:10:22 (space separator)
# - 2025-03-15T20:10:22+01:00 (with timezone)
colorize_timestamps() {
  # Most basic approach - use cat with unbuffered output
  cat -u | while IFS= read -r line; do

    # ISO with comma milliseconds
    line=$(echo "$line" | sed -E "s/^([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3})/${CYAN}\1${NC}/g")

    # ISO with period milliseconds and Z
    line=$(echo "$line" | sed -E "s/^([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z)/${CYAN}\1${NC}/g")

    # space separator
    line=$(echo "$line" | sed -E "s/^([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})/${CYAN}\1${NC}/g")

    # ISO with timezone offset
    line=$(echo "$line" | sed -E "s/^([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2})/${CYAN}\1${NC}/g")
    echo "$line"
  done
}

# function to colorize trace formats (mulog, etc.)
# example:
# {"tags":{"mulog/event-name":":toolbox.utilities.scheduler/run-scheduled-fn","mulog/outcome":":ok"}}
colorize_traces() {
  # escape trace variables for use in regex
  local function_name_esc=$(echo "$TRACE_FUNCTION_NAME" | sed 's/\//\\\//g')
  local outcome_esc=$(echo "$TRACE_OUTCOME" | sed 's/\//\\\//g')
  local outcome_ok_esc=$(echo "$TRACE_OUTCOME_OK" | sed 's/\//\\\//g')
  local outcome_warn_esc=$(echo "$TRACE_OUTCOME_WARN" | sed 's/\//\\\//g')
  local outcome_error_esc=$(echo "$TRACE_OUTCOME_ERROR" | sed 's/\//\\\//g')
  local trace_id_esc=$(echo "$TRACE_ID" | sed 's/\//\\\//g')

  # color function name
  sed -E "s/(\"$function_name_esc\":)([^,}]*)/${GRAY}\1${NC}${LIGHT_BLUE}\2${NC}/g" |

  # color outcome based on value
  sed -E "
    s/(\"$outcome_esc\":)(\"?$outcome_ok_esc\"?)/${GRAY}\1${NC}${GREEN}\2${NC}/g
    s/(\"$outcome_esc\":)(\"?$outcome_warn_esc\"?)/${GRAY}\1${NC}${YELLOW}\2${NC}/g
    s/(\"$outcome_esc\":)(\"?$outcome_error_esc\"?)/${GRAY}\1${NC}${RED}\2${NC}/g
  " |

  # color trace id
  sed -E "s/(\"$trace_id_esc\":)\"?([^,}\"]+)\"?/${GRAY}\1${NC}${DARK_GRAY}\2${NC}/g"
}

colorize_logs() {
  # return the input unchanged if no_color is set
  if [ ! -z "$no_color" ]; then
    cat
    return
  fi

  # otherwise apply colorization
  while IFS= read -r line; do
    line=$(echo "$line" | colorize_log_levels)
    line=$(echo "$line" | colorize_timestamps)
    line=$(echo "$line" | colorize_traces)
    echo "$line"
  done
}

if [ -z "$grep_pattern" ]
then
  if [ -z "$tail_all" ]
  then
    nexec="nomad logs -tail -n 99 -f"
  else
    nexec="nomad alloc exec -i"
  fi
else
  nexec="nomad alloc exec -i"

  if [ -z "$file_name" ]
  then
    ## non GNU grep does not have --exclude for hidden files
    ## "/file*" does not expand over ssh
    ## hence cd | ls | xargs grep
    with_grep='sh -c "cd /alloc/logs/ && ls | xargs grep -E \"'$grep_pattern'\""'  ## TODO: validate empty values
  else
    with_grep="grep -E \"$grep_pattern\" $log_root/$file_name"
  fi
fi

echo "hit ctrl-c to stop"

allocs=( `nomad job allocs -json $job | jq -rn 'inputs[] .ID'` )
nomad_clients=( `nomad job allocs -json $job | jq -rn 'inputs[] .NodeName'` )
versions=( `nomad job allocs -json $job | jq -rn 'inputs[] .TaskStates[].Events[] .Details | select(.image) | .image' | cut -d':' -f 2` )

echo -e "${CYAN}-------------------------------------------------------------------------------------${NC}"
echo -e "looking at logs for \t \"${BLUE}$job${NC}\" app"
echo -e "logs from \t\t $log_root/$file_name"
echo
echo -e "${CYAN}                          allocation | version | node client${NC}"
echo -e "${CYAN}-------------------------------------------------------------------------------------${NC}"

PIDS=""

for i in "${!allocs[@]}"; do

  [ -z "${versions}" ] && version="no tag" || version="${versions[i]}"

  echo -e "${allocs[i]} |  ${BLUE}$version${NC} | ${nomad_clients[i]}"

  if [ -z "$with_grep" ]
  then
    [ ! -z "$verbose" ] && echo "running: $nexec $with_task ${allocs[i]} $tail_all &"
    eval "$nexec $with_task ${allocs[i]} $tail_all | colorize_logs &"
  else
    [ ! -z "$verbose" ] && echo "running: $nexec $with_task ${allocs[i]} $with_grep"
    eval "$nexec $with_task ${allocs[i]} $with_grep"
  fi

  PIDS="$PIDS $!"
done

echo -e "${CYAN}-------------------------------------------------------------------------------------${NC}"

trap 'kill $PIDS' SIGINT

wait
